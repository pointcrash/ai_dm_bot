from typing import Optional
from aiogram.types import Message
from aiogram.filters import Command
from services.openai_service import OpenAIService
from services.group_service import GroupService
from services.character_service import CharacterService
from services.campaign_service import CampaignService
from config.hard_messages import START_MESSAGE, CLEAR_HISTORY_MESSAGE, HELP_MESSAGE
from datetime import datetime
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
openai_service = OpenAIService()
group_service = GroupService()
character_service = CharacterService()
campaign_service = CampaignService()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
campaign_edit_states = {}

async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(START_MESSAGE)

async def cmd_help(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(HELP_MESSAGE)

async def cmd_campaign(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
    chat_id = message.chat.id
    args = message.text.split(maxsplit=1)
    
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if len(args) > 1:
            description = args[1]
            campaign = campaign_service.get_campaign(chat_id)
            campaign = campaign_service.update_campaign(chat_id, description=description)
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            return
            
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        campaign = campaign_service.get_campaign(chat_id)
        if not campaign.description:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /campaign –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
        else:
            await message.answer(f"üìú –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏:\n\n{campaign.description}")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}")

async def handle_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not message.text:
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ç–æ—á–∫–∏ –∏–ª–∏ —Å–ª–µ—à–∞
    if message.text.startswith(('.', '/')):
        return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥
    message_time = message.date.timestamp()
    current_time = datetime.now().timestamp()
    if current_time - message_time > 5:
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
        await message.bot.send_chat_action(chat_id=chat_id, action="typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        response = await openai_service.get_response(
            user_id=user_id,
            user_message=message.text,
            chat_id=chat_id if message.chat.type != "private" else None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_history(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
    try:
        chat_id = message.chat.id
        history = openai_service.history_service.get_formatted_history(chat_id)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        chunk_size = 4000
        for i in range(0, len(history), chunk_size):
            chunk = history[i:i + chunk_size]
            await message.answer(chunk)
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

async def cmd_clear_history(message: Message) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
    try:
        chat_id = message.chat.id
        openai_service.history_service.clear_history(chat_id)
        await message.answer(CLEAR_HISTORY_MESSAGE)
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

async def cmd_create_summary(message: Message) -> None:
    """–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        chat_id = message.chat.id
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        history = openai_service.history_service.get_chat_history(chat_id)
        
        if not history.messages:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –æ–±–æ–±—â–∞—Ç—å.")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
        await message.bot.send_chat_action(chat_id=chat_id, action="typing")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏
        history._create_summary()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–Ω–æ:\n\n{history.summary}")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}")

async def cmd_group_members(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã"""
    try:
        members = group_service.get_formatted_members(message.chat.id)
        await message.answer(members)
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ –≥—Ä—É–ø–ø—ã: {str(e)}")

async def cmd_join_group(message: Message) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        active_character = character_service.get_active_character(message.from_user.id)
        
        if not active_character:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
            return
            
        if group_service.add_member(message.chat.id, message.from_user.id, active_character):
            await message.answer(f"‚úÖ {active_character['name']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ!")
        else:
            await message.answer(f"‚ùå {active_character['name']} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ: {str(e)}")

async def cmd_leave_group(message: Message) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    try:
        active_character = character_service.get_active_character(message.from_user.id)
        
        if not active_character:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
            return
            
        if group_service.remove_member(message.chat.id, active_character['name']):
            await message.answer(f"‚úÖ {active_character['name']} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É.")
        else:
            await message.answer(f"‚ùå {active_character['name']} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã: {str(e)}")

async def cmd_remove_member(message: Message) -> None:
    """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_member <–∏–º—è_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞>")
            return
            
        character_name = args[1]
        if group_service.remove_member(message.chat.id, character_name):
            await message.answer(f"‚úÖ {character_name} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.")
        else:
            await message.answer(f"‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {str(e)}")

async def cmd_roll(message: Message) -> None:
    """–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /roll ndm –∏–ª–∏ /roll –¥–ª—è –±—Ä–æ—Å–∫–∞ 1d20"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1d20 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if len(args) == 1:
            num_dice = 1
            sides = 20
        else:
            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            dice_str = args[1].lower()
            if 'd' not in dice_str:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>d<–≥—Ä–∞–Ω–∏>")
                return
                
            num_dice, sides = dice_str.split('d')
            try:
                num_dice = int(num_dice)
                sides = int(sides)
            except ValueError:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –∏ –≥—Ä–∞–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
                return
                
            if num_dice < 1 or sides < 2:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π –±–æ–ª—å—à–µ 1")
                return
            
        # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏
        rolls = [random.randint(1, sides) for _ in range(num_dice)]
        total = sum(rolls)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = f"üé≤ –ë—Ä–æ—Å–æ–∫ {num_dice}d{sides}:\n"
        result += f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {', '.join(map(str, rolls))}\n"
        result += f"–°—É–º–º–∞: {total}"
        
        await message.answer(result)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–æ–≤: {str(e)}")

async def cmd_delete_campaign(message: Message) -> None:
    """–£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
    chat_id = message.chat.id
    
    try:
        if campaign_service.delete_campaign(chat_id):
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: {str(e)}") 