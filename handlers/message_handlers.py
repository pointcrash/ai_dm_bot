from aiogram.types import Message
from aiogram.filters import Command
from services.openai_service import OpenAIService
from services.campaign_service import CampaignService
from services.group_service import GroupService
from services.character_service import CharacterService
from config.hard_messages import START_MESSAGE, CLEAR_HISTORY_MESSAGE, HELP_MESSAGE, CAMPAIGN_MESSAGE
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
openai_service = OpenAIService()
campaign_service = CampaignService()
group_service = GroupService()
character_service = CharacterService()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
campaign_states = {}

async def cmd_start(message: Message):
    await message.answer(START_MESSAGE)

async def cmd_help(message: Message):
    await message.answer(HELP_MESSAGE)

async def cmd_campaign(message: Message):
    user_id = message.from_user.id
    campaign_states[user_id] = "theme"
    await message.answer("üé≠ –ö–∞–∫—É—é —Ç–µ–º–∞—Ç–∏–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–ª—è —Å–≤–æ–µ–π –∫–∞–º–ø–∞–Ω–∏–∏? (–≥–µ—Ä–æ–∏—á–µ—Å–∫–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏, —Ç–µ–º–Ω–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏, –∫–æ–º–µ–¥–∏—è –∏ —Ç.–¥.)")

async def handle_message(message: Message):
    user_id = message.from_user.id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ç–æ—á–∫–∏
    if message.text.startswith('.'):
        return
        
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥
    message_time = message.date.timestamp()
    current_time = datetime.now().timestamp()
    if current_time - message_time > 5:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    if user_id in campaign_states:
        state = campaign_states[user_id]
        
        if state == "theme":
            campaign_service.update_campaign(user_id, theme=message.text)
            campaign_states[user_id] = "world"
            await message.answer("üåç –ö–∞–∫–æ–π –º–∏—Ä –∏–ª–∏ —Å–µ—Ç—Ç–∏–Ω–≥ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (Forgotten Realms, Darksun –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∏—Ä)")
            
        elif state == "world":
            campaign_service.update_campaign(user_id, world=message.text)
            campaign_states[user_id] = "characters"
            await message.answer("üë• –û–ø–∏—à–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ø–∞—Ä—Ç–∏–∏ (–∫–ª–∞—Å—Å—ã, —Ä–∞—Å—ã, –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏)")
            
        elif state == "characters":
            campaign_service.update_campaign(user_id, characters=[message.text])
            campaign_states[user_id] = "game_structure"
            await message.answer("‚è∞ –ö–∞–∫–æ–≤–∞ –±—É–¥–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä—ã? (—á–∞—Å—Ç–æ—Ç–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π)")
            
        elif state == "game_structure":
            campaign_service.update_campaign(user_id, game_structure=message.text)
            campaign_states[user_id] = "additional_elements"
            await message.answer("‚ú® –ö–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∫–ª—é—á–∏—Ç—å? (–º–∞–≥–∏—è, –ø–æ–ª–∏—Ç–∏–∫–∞, –ø–æ–¥–∑–µ–º–µ–ª—å—è –∏ —Ç.–¥.)")
            
        elif state == "additional_elements":
            campaign_service.update_campaign(user_id, additional_elements=[message.text])
            del campaign_states[user_id]  # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = campaign_service.get_formatted_settings(user_id)
            await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n{settings}")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        response = await openai_service.get_response(
            user_id=message.from_user.id,
            user_message=message.text,
            chat_id=message.chat.id if message.chat.type != "private" else None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)
        
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_history(message: Message):
    chat_id = message.chat.id
    history = openai_service.history_service.get_formatted_history(chat_id)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    chunk_size = 4000
    for i in range(0, len(history), chunk_size):
        chunk = history[i:i + chunk_size]
        await message.answer(chunk)

async def cmd_clear_history(message: Message):
    chat_id = message.chat.id
    openai_service.history_service.clear_history(chat_id)
    await message.answer(CLEAR_HISTORY_MESSAGE)

async def cmd_create_summary(message: Message):
    try:
        chat_id = message.chat.id
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        history = openai_service.history_service.get_chat_history(chat_id)
        
        if not history.messages:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –æ–±–æ–±—â–∞—Ç—å.")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏
        history._create_summary()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–Ω–æ:\n\n{history.summary}")
        
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}")

async def cmd_group_members(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã"""
    members = group_service.get_formatted_members(message.chat.id)
    await message.answer(members)

async def cmd_join_group(message: Message):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –≥—Ä—É–ø–ø—É"""
    active_character = character_service.get_active_character(message.from_user.id)
    
    if not active_character:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return
        
    if group_service.add_member(message.chat.id, message.from_user.id, active_character):
        await message.answer(f"‚úÖ {active_character['name']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ!")
    else:
        await message.answer(f"‚ùå {active_character['name']} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ.")

async def cmd_leave_group(message: Message):
    """–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    active_character = character_service.get_active_character(message.from_user.id)
    
    if not active_character:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return
        
    if group_service.remove_member(message.chat.id, active_character['name']):
        await message.answer(f"‚úÖ {active_character['name']} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É.")
    else:
        await message.answer(f"‚ùå {active_character['name']} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ.")

async def cmd_remove_member(message: Message):
    """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_member <–∏–º—è_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞>")
        return
        
    character_name = args[1]
    if group_service.remove_member(message.chat.id, character_name):
        await message.answer(f"‚úÖ {character_name} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.")
    else:
        await message.answer(f"‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ.") 