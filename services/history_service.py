from typing import Dict, List
from dataclasses import dataclass, field
from datetime import datetime
import json
import os
from pathlib import Path
from config.config import MAIN_PROMT, MAX_HISTORY_LENGTH
from services.summary_service import SummaryService
from services.character_service import CharacterService
from services.group_service import GroupService
from services.campaign_service import CampaignService

@dataclass
class Message:
    role: str
    content: str
    timestamp: datetime = field(default_factory=datetime.now)

    def to_dict(self):
        return {
            'role': self.role,
            'content': self.content,
            'timestamp': self.timestamp.isoformat()
        }

    @classmethod
    def from_dict(cls, data: dict):
        return cls(
            role=data['role'],
            content=data['content'],
            timestamp=datetime.fromisoformat(data['timestamp'])
        )

@dataclass
class ChatHistory:
    messages: List[Message] = field(default_factory=list)
    max_history: int = MAX_HISTORY_LENGTH
    summary: str = ""

    def add_message(self, role: str, content: str):
        if len(self.messages) >= self.max_history:
            self._create_summary()
        self.messages.append(Message(role=role, content=content))

    def _create_summary(self):
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –æ—Ç SummaryService
        summary_service = SummaryService()
        summary = summary_service.create_summary(self.messages, self.summary)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏
        self.summary = summary
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.messages.clear()

    def get_messages(self) -> List[dict]:
        messages = [{"role": msg.role, "content": msg.content} for msg in self.messages]
        return messages

    def clear(self):
        self.messages.clear()
        self.summary = ""

    def get_formatted_history(self) -> str:
        if not self.messages and not self.summary:
            return "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞"
        
        formatted = "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n\n"
        if self.summary:
            formatted += f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {self.summary}\n\n"
        for msg in self.messages:
            role = "–í—ã" if msg.role == "user" else "–ú–∞—Å—Ç–µ—Ä –ø–æ–¥–∑–µ–º–µ–ª–∏–π"
            formatted += f"{role}: {msg.content}\n\n"
        return formatted

    def to_dict(self):
        return {
            'messages': [msg.to_dict() for msg in self.messages],
            'summary': self.summary
        }

    @classmethod
    def from_dict(cls, data: dict):
        history = cls()
        history.messages = [Message.from_dict(msg_data) for msg_data in data['messages']]
        history.summary = data['summary']
        return history

class HistoryService:
    def __init__(self, history_dir: str = "data/history"):
        self.history_dir = Path(history_dir)
        self.chats: Dict[int, ChatHistory] = {}  # chat_id -> ChatHistory
        self.character_service = CharacterService()
        self.group_service = GroupService()
        self.campaign_service = CampaignService()
        self._ensure_history_dir()
        self._load_histories()

    def _ensure_history_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        self.history_dir.mkdir(parents=True, exist_ok=True)

    def _get_history_file_path(self, chat_id: int) -> Path:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏"""
        return self.history_dir / f"chat_{chat_id}.json"

    def _load_histories(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        for history_file in self.history_dir.glob("chat_*.json"):
            try:
                chat_id = int(history_file.stem.split('_')[1])
                with open(history_file, 'r', encoding='utf-8') as f:
                    history_data = json.load(f)
                    self.chats[chat_id] = ChatHistory.from_dict(history_data)
            except (json.JSONDecodeError, IOError, ValueError) as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ {history_file}: {e}")

    def _save_history(self, chat_id: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª"""
        history = self.chats.get(chat_id)
        if history:
            try:
                with open(self._get_history_file_path(chat_id), 'w', encoding='utf-8') as f:
                    json.dump(history.to_dict(), f, ensure_ascii=False, indent=2)
            except IOError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ {chat_id}: {e}")

    def _format_character_context(self, character: dict) -> str:
        """Format character information into a context string for the AI"""
        context = f"–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {character['user_id']} –ø–æ –∏–º–µ–Ω–∏ {character['name']}, "
        context += f"{character['race']} {character['class_name']} {character['level']} —É—Ä–æ–≤–Ω—è. "
        
        # Add character description if available
        if character.get('description'):
            context += f"\n–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character['description']}\n"
        
        # Add key abilities
        context += "\n–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n"
        for ability, data in character['abilities'].items():
            context += f"- {data['name']}: {data['value']} (–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä {data['modifier']:+d})\n"
            
            # Add skills with proficiency bonus
            if data['skills']:
                context += f"  –ù–∞–≤—ã–∫–∏ ({data['name']}):\n"
                for skill in data['skills']:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –∏–∑ advanced_stats
                    skill_value = character['advanced_stats']['skills']['values'].get(skill, 0)
                    proficiency = 'none'
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–º
                    if skill in character['advanced_stats']['skills']['expertise']:
                        proficiency = 'expertise'
                    elif skill in character['advanced_stats']['skills']['proficiencies']:
                        proficiency = 'proficient'
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è
                    proficiency_text = ""
                    if proficiency == 'expertise':
                        proficiency_text = " (–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞)"
                    elif proficiency == 'proficient':
                        proficiency_text = " (–í–ª–∞–¥–µ–Ω–∏–µ)"
                        
                    context += f"  - {skill}: {skill_value:+d}{proficiency_text}\n"
        
        # Add current state
        hp = character['base_stats']['hit_points']
        context += f"\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n"
        context += f"- –ó–¥–æ—Ä–æ–≤—å–µ: {hp['current']}/{hp['maximum']} (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ: {hp['temporary']})\n"
        context += f"- –ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏: {character['base_stats']['armor_class']['value']}\n"
        
        # Add equipment
        context += "\n–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n"
        if character['equipment']['weapons']['items']:
            context += f"- –û—Ä—É–∂–∏–µ: {', '.join(character['equipment']['weapons']['items'])}\n"
        if character['equipment']['armor']['items']:
            context += f"- –ë—Ä–æ–Ω—è: {', '.join(character['equipment']['armor']['items'])}\n"
        if character['equipment']['items']['items']:
            context += f"- –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(character['equipment']['items']['items'])}\n"
        
        # Add spells if character has them
        if character['magic']['spells_known']['cantrips'] or character['magic']['spells_known']['spells']:
            context += "\n–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:\n"
            if character['magic']['spells_known']['cantrips']:
                context += f"- –ó–∞–≥–æ–≤–æ—Ä—ã: {', '.join(character['magic']['spells_known']['cantrips'])}\n"
            if character['magic']['spells_known']['spells']:
                context += f"- –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: {', '.join(character['magic']['spells_known']['spells'])}\n"
        
        return context

    def _format_group_context(self, chat_id: int) -> str:
        """Format group information into a context string for the AI"""
        members = self.group_service.get_members(chat_id)
        if not members:
            return ""
            
        context = "\nüë• –°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã:\n"
        for member in members:
            character_data = self.character_service.get_active_character(member.user_id)
            if character_data:
                context += f"\n{self._format_character_context(character_data)}"
            else:
                context += f"\n–ü–µ—Ä—Å–æ–Ω–∞–∂ {member.character_name} (–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"
        return context

    def get_chat_history(self, chat_id: int) -> ChatHistory:
        if chat_id not in self.chats:
            self.chats[chat_id] = ChatHistory()
        return self.chats[chat_id]

    def add_user_message(self, chat_id: int, content: str):
        history = self.get_chat_history(chat_id)
        history.add_message("user", content)
        self._save_history(chat_id)

    def add_assistant_message(self, chat_id: int, content: str):
        history = self.get_chat_history(chat_id)
        history.add_message("assistant", content)
        self._save_history(chat_id)

    def _get_system_message(self, chat_id: int, history: ChatHistory) -> dict:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç system-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è API"""
        system_content = MAIN_PROMT

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        campaign = self.campaign_service.get_campaign(chat_id)
        if campaign and campaign.description:
            system_content += f"\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏:\n{campaign.description}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if history.summary:
            system_content += f"\n\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {history.summary}"
            
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        self.group_service._load_groups()
        group_context = self._format_group_context(chat_id)
        if group_context:
            system_content += group_context
            
        return {"role": "system", "content": system_content}

    def get_messages_for_api(self, chat_id: int) -> List[dict]:
        history = self.get_chat_history(chat_id)
        system_message = self._get_system_message(chat_id, history)
        return [system_message] + history.get_messages()

    def clear_history(self, chat_id: int):
        if chat_id in self.chats:
            self.chats[chat_id].clear()
            self._save_history(chat_id)

    def get_formatted_history(self, chat_id: int) -> str:
        history = self.get_chat_history(chat_id)
        return history.get_formatted_history() 