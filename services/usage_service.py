import json
from pathlib import Path
from datetime import datetime
from typing import Dict, Optional, Tuple
from config.config import DEFAULT_REQUESTS_LIMIT

class UsageService:
    def __init__(self, usage_dir: str = "data/usage"):
        self.usage_dir = Path(usage_dir)
        self._ensure_usage_dir()

    def _ensure_usage_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
        self.usage_dir.mkdir(parents=True, exist_ok=True)

    def _get_usage_file_path(self) -> Path:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
        return self.usage_dir / "usage_stats.json"

    def _read_usage_data(self) -> Dict:
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        usage_file = self._get_usage_file_path()
        if not usage_file.exists():
            return {}
            
        try:
            with open(usage_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                return {int(k): v for k, v in data.items()}
        except (json.JSONDecodeError, IOError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {e}")
            return {}

    def _write_usage_data(self, data: Dict):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self._get_usage_file_path(), 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {e}")

    def update_user_info(self, user_id: int, first_name: Optional[str] = None, username: Optional[str] = None):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            first_name (Optional[str]): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username (Optional[str]): –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        data = self._read_usage_data()
        
        if user_id not in data:
            data[user_id] = {
                "remaining_requests": DEFAULT_REQUESTS_LIMIT,
                "last_request": None,
                "total_requests": 0,
                "first_name": None,
                "username": None
            }
        
        if first_name:
            data[user_id]["first_name"] = first_name
        if username:
            data[user_id]["username"] = username
            
        self._write_usage_data(data)

    def decrement_usage(self, user_id: int) -> Tuple[bool, int]:
        """
        –£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[bool, int]: (–º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤)
        """
        data = self._read_usage_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if user_id not in data:
            data[user_id] = {
                "remaining_requests": DEFAULT_REQUESTS_LIMIT,
                "last_request": None,
                "total_requests": 0,
                "first_name": None,
                "username": None
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if data[user_id]["remaining_requests"] <= 0:
            return False, 0
            
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        data[user_id]["remaining_requests"] -= 1
        data[user_id]["total_requests"] += 1
        data[user_id]["last_request"] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._write_usage_data(data)
        
        return True, data[user_id]["remaining_requests"]

    def get_usage_stats(self, user_id: int) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = self._read_usage_data()
        return data.get(user_id)

    def get_formatted_usage_stats(self, user_id: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        stats = self.get_usage_stats(user_id)
        if not stats:
            return f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞\n–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {DEFAULT_REQUESTS_LIMIT}"
            
        last_request = datetime.fromisoformat(stats["last_request"]) if stats["last_request"] else None
        last_request_str = last_request.strftime("%d.%m.%Y %H:%M:%S") if last_request else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        user_info = []
        if stats.get("first_name"):
            user_info.append(f"–ò–º—è: {stats['first_name']}")
        if stats.get("username"):
            user_info.append(f"–ù–∏–∫: @{stats['username']}")
        user_info_str = "\n".join(user_info) if user_info else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        return f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n" \
               f"{user_info_str}\n" \
               f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['remaining_requests']}\n" \
               f"–í—Å–µ–≥–æ —Å–¥–µ–ª–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}\n" \
               f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {last_request_str}" 